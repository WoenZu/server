"use strict";

var os = require('os');
var us = require('user');

var user = new us.UserInfo();

function MessageFabric() {
  this.general = 'iTCniaM';
  this.private = 'gsMTCI';
  this.SEPARATOR = '\u0013';
  this.DOUBLE_SEP = '\u0013\u0013';
}

MessageFabric.prototype.createMessage = function ( command, param ) {
  var s = this.SEPARATOR;
  var ss = this.DOUBLE_SEP;

  var general = this.general;
  var messageTemplate = s + 'iChat' + ss + '1' + ss + user.getUserInfo() + ss;
  var message = '';

  switch ( command ) {
    case 'disconnect':
      message = 'DISCONNECT' + ss + general;
      break;
    case 'connect':
      message = 'CONNECT' + ss + general + ss + user.getUserName() + ss + 'macZu' + ss +
        ss + 'hello mac chat' + ss + '*' + ss + 'version v0.0.1' + ss + '0';
      break;
    case 'text':
      message = 'TEXT' + ss + general + ss + param + ss + '*'; //text message to general chat = test
      break;
    case 'rename':
      message = 'RENAME' + ss + param;
      break;
    default:
      //debug message - unknown command

      //TEXT [0x13][0x13] [имя линии] [0x13][0x13] [текст сообщения] [0x13][0x13] [имя получателя (не IDENT)]
  }

  console.log( 'builded message: ' + message );
  return messageTemplate + message + s;
};

  // we need to know what message is
  // for example:
  // msg to general or private message
  // or is a board message

//  commands:
// /? - this help message
// /help
// /cmdlist - list of available commands
// /clear - clear chat window
// /clear_history - clear history
// /refresh - refresh user list
// /who - refresh user list
// /nick "new nick" - change nick
// /nextnick "new nick" - change nick for next loading chat
// /msg "user" message - send private message
// /me message
// /smiles - show all of smiles

exports.MessageFabric = MessageFabric;
